package main

import (
	"fmt"
)

func aboutGoRoutine() {
	fmt.Println("===goroutine===")
	// 并发和并行
	//     A. 多线程程序在一个核的cpu上运行，就是并发。
	//     B. 多线程程序在多个核的cpu上运行，就是并行。


	// 进程和线程
	// 进程是资源分配的最小单位，线程是CPU调度的最小单位


	// 协程和线程
	// 协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。
	// 线程：一个线程上可以跑多个协程，协程是轻量级的线程。


	// goroutine 只是由官方实现的超级"线程池"。
	// 每个实力 4~5KB 的栈内存占用和由于实现机制而大幅减少的创建和销毁开销是go高并发的根本原因。


	// 并发不是并行：
	// 并发主要由切换时间片来实现"同时"运行，并行则是直接利用多核实现多线程的运行，go可以设置使用核数，以发挥多核计算机的能力。

	// goroutine 奉行通过通信来共享内存，而不是共享内存来通信。


	// 使用goroutine
	// Go语言中使用goroutine非常简单，只需要在调用函数的时候在前面加上go关键字，就可以为一个函数创建一个goroutine。
	// 一个goroutine必定对应一个函数，可以创建多个goroutine去执行相同的函数。


	// 启动单个goroutine
	// 启动goroutine的方式非常简单，只需要在调用的函数（普通函数和匿名函数）前面加上一个go关键字。
}